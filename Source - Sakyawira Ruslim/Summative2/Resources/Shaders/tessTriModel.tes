#version 450 core

uniform mat4  MVP;

in vec3 tesfragPos[];
in vec3 tesfragNormal[];
in vec2 tesfragTexCoord[];
in vec4 tesFragPosLightSpace[];

out vec3 fragPos;
out vec3 fragNormal;
out vec2 fragTexCoord;
out vec4 FragPosLightSpace;

layout (triangles, equal_spacing, cw) in;

float Random(int x, int y)
{
	int n = x + y * 57;
	n = (n << 13) ^ n;
	int t = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;
	return 1.0f - float(t) * 0.931322574615478515625e-9;
}

float Smooth(float x, float y)
{
	float corners = (Random(int(x - 1.0f), int(y - 1.0f)) + Random(int(x + 1.0f), int(y - 1.0f)) + Random(int(x - 1.0f), int(y + 1.0f)) + Random(int(x + 1.0f), int(y + 1.0f))) / 16.0f;
	float sides = (Random(int(x - 1.0f), int(y)) + Random(int(x + 1.0f), int(y)) + Random(int(x), int(y - 1.0f)) + Random(int(x), int(y + 1.0f))) / 8.0f;
	float center = Random(int(x), int(y)) / 4.0f;
	return corners + sides + center;
}

float Interpolate(float a, float b, float x)
{
	//float ft = x * 3.1415927;
	//float f = (1 - cos(ft)) * 0.5f;
	//return a*(1 - f) + b*f;

	return a + x * (b - a);
}

float Noise(float x, float y)
{
	float	fractional_X = x - int(x);
	float 	fractional_Y = y - int(y);

	//smooths
	float v1 = Smooth(int(x), int(y));
	float v2 = Smooth(int(x) + 1, int(y));
	float v3 = Smooth(int(x), int(y) + 1);
	float v4 = Smooth(int(x) + 1, int(y) + 1);

	// interpolates
	float i1 = Interpolate(v1, v2, fractional_X);
	float i2 = Interpolate(v3, v4, fractional_X);

	float final = Interpolate(i1, i2, fractional_Y);

	return final;
}

float TotalNoisePerPoint(int x, int y)
{
	int octaves = 2;
	float zoom = 30.0f;
	float persistance = 0.9f;

	float total = 0.0f;

	for (int i = 0; i < octaves - 1; i++) {

		float frequency = pow(2, i) / zoom;
		float amplitude = pow(persistance, i);

		total += Noise(x * frequency, y * frequency) * amplitude;
	}

	return total;
}

void main(void)
{ 
	fragPos = (
	gl_TessCoord.x * tesfragPos[0] + 
	gl_TessCoord.y * tesfragPos[1] + 
	gl_TessCoord.z * tesfragPos[2]);

	fragTexCoord = (
		gl_TessCoord.x * tesfragTexCoord[0] +
		gl_TessCoord.y * tesfragTexCoord[1] +
		gl_TessCoord.z * tesfragTexCoord[2]);

	fragNormal = (
		gl_TessCoord.x * tesfragNormal[0] +
		gl_TessCoord.y * tesfragNormal[1] +
		gl_TessCoord.z * tesfragNormal[2]);

	FragPosLightSpace= (
		gl_TessCoord.x * tesFragPosLightSpace[0] +
		gl_TessCoord.y * tesFragPosLightSpace[1] +
		gl_TessCoord.z * tesFragPosLightSpace[2]);

	

	//vec4 position0 = gl_TessCoord.x * vec4(gl_in[0].gl_Position.x, gl_in[0].gl_Position.y, gl_in[0].gl_Position.z, gl_in[0].gl_Position.w);
	//vec4 position1 = gl_TessCoord.y * vec4(gl_in[1].gl_Position.x, gl_in[0].gl_Position.y, gl_in[1].gl_Position.z, gl_in[1].gl_Position.w);
	//vec4 position2 = gl_TessCoord.z * vec4(gl_in[2].gl_Position.x, gl_in[0].gl_Position.y, gl_in[2].gl_Position.z, gl_in[2].gl_Position.w);

	// Apply level of detail on the height
	vec4 worldPos = (gl_TessCoord.x * gl_in[0].gl_Position + gl_TessCoord.y * gl_in[1].gl_Position + gl_TessCoord.z * gl_in[2].gl_Position );

	//tse_out.worldPosition = worldPos.xyz;
	float tesHeight = TotalNoisePerPoint(int(worldPos.x), int(worldPos.y)) * 55.0f;
	worldPos.y = worldPos.y + tesHeight;
	gl_Position = MVP * worldPos;

	//gl_Position= MVP * 
	//(gl_TessCoord.x * gl_in[0].gl_Position + gl_TessCoord.y * gl_in[1].gl_Position + gl_TessCoord.z * gl_in[2].gl_Position );
}
